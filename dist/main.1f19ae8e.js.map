{"version":3,"sources":["node_modules/regenerator-runtime/runtime.js","storage.js","weatherData.js","ui.js","main.js"],"names":["storage","city","country","saveItem","localStorage","setItem","getItem","weatherData","API_KEY","getWeather","fetch","res","json","data","console","log","message","UI","loadSelectors","cityElm","document","querySelector","cityInfoElm","iconElm","temperatureElm","pressureElm","humidityElm","feelElm","formElm","countryElm","messageElm","showMessage","msg","elm","insertAdjacentHTML","hideMessage","setTimeout","remove","validateInput","getInputValues","value","isValid","getIcon","iconCode","printWeather","main","weather","cityName","name","textContent","temp","pressure","humidity","description","setAttribute","icon","resetInputValues","handleRemoteData","cod","init","addEventListener","e","preventDefault","window"],"mappings":";AAAA;AIUA,AJTA;AACA;AISA,AJRA;AACA;AACA,ACLA,IAAMA,OAAO,GAAG;ADMhB,ACLEC,AEDF,EFCEA,IAAI,EAAE,EADQ;AGAhB,AJOA,ACLEC,EAAAA,OAAO,EAAE,EAFK;AGChB,AJOA,ACLEC,AEFF,EFEEA,QAHc,sBAGH;AGDb,AJOA,ACLIC,IAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuC,KAAKJ,IAA5C;AGDJ,AJOA,ACLIG,ACLJ,IDKIA,YAAY,CAACC,OAAb,CAAqB,mBAArB,EAA0C,KAAKH,OAA/C;AGAJ,AJMA,ACLG,ACLH,GDDgB,CCCVK,WAAW,GAAG;AEKpB,AJMA,ACLED,ACLAL,EDKAK,ACLAL,IAAI,EAAE,CDFQ,CCCI,oBDMR;AGAZ,AJMA,ACLI,ACLFC,EAAAA,ODKOD,ACLA,EAAE,EDKP,ACPgB,GDOJG,YAAY,CAACE,OAAb,CAAqB,gBAArB,CAAZ;AGAJ,AJMA,ACLI,ACLFE,EAAAA,ODKON,ACLA,EAAE,KDKP,GAAeE,YAAY,CAACE,OAAb,CAAqB,KCRpB,cDQD,CAAf;AGIJW,AJEA,ACLG,ACLKR,EAAAA,UEQLkD,AFZiB,IEYpB,oBFRqB;AFWrB,AChBgB,AEGhB,ADEqB,CDLrB,GEGM1C,EAAE,GAAG;AHcX,AGbEC,EAAAA,aFSalB,AEVJ,2BACO;AHclB,AGbI,ADAiB,QCAXmB,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAhB;AHcJ,AGbI,ADDiB,QCCXC,WAAW,GAAGF,QAAQ,CAACC,aAAT,CAAuB,SAAvB,CAApB;AHcJ,AGbI,ADFiB,QCEXE,OAAO,GAAGH,QAAQ,CAACC,aAAT,CAAuB,SAAvB,CAAhB;AHcJ,AGbI,ADHiB,QCGXG,cAAc,GAAGJ,QAAQ,CAACC,aAAT,CAAuB,SAAvB,CAAvB;AHcJ,AGbI,ADJiB,QCIXI,WAAW,GAAGL,QAAQ,CAACC,aAAT,CAAuB,aAAvB,CAApB;AHcJ,AGbI,ADLiB,QCKXK,WAAW,GAAGN,QAAQ,CAACC,aAAT,CAAuB,aAAvB,CAApB;AHcJ,AGbI,ADNiB,QCMXM,OAAO,GAAGP,QAAQ,CAACC,aAAT,CAAuB,SAAvB,CAAhB;AHcJ,AGbI,ADPiB,QCOXO,OAAO,GAAGR,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAhB;AHcJ,AGbI,ADRiB,QCQXQ,UAAU,GAAGT,ADNCV,KAAK,GCME,CAACW,aAAT,CAAuB,UAAvB,CAAnB,gCDLyD,KAAI,CAACpB,IADrC,cAC6C,KAAI,CAACC,OADlD,iCACgF,KAAI,CAACM,OADrF,EAFR;AFsBrB,AGbI,QAAMsB,UAAU,GAAGV,QAAQ,CAACC,aAAT,CAAuB,iBAAvB,CAAnB;AHcJ,AGZI,ADXiB,WCWV;AHaX,AGZMC,ADVMX,MCUNW,QDVMX,GCUK,ADZI,ECYfW,WADK;AHcX,AGZMH,ADbe,MCafA,OAAO,EAAPA,OAFK;AHeX,AGZMU,ADde,MCcfA,UAAU,EAAVA,GDTmBlB,GAAG,CAACC,GCMlB,CDNc,EALJ;AF2BrB,AGZMW,MAAAA,OAAO,EAAPA,OAJK;AHiBX,AGZMC,ADhBe,MCgBfA,cAAc,EAAdA,cALK;AHkBX,AGZMC,ADZMZ,MCYNY,QDZMZ,GCYK,CDjBI,CCiBfY,WANK;AHmBX,AGZME,ADlBe,MCkBfA,OAAO,EAAPA,OAPK,yBDJE;AFwBb,AGZMD,ADXEb,MCWFa,UDXEb,CCWS,EAAXa,CDXM,EAAJb,QCGG;AHqBX,AGZMe,ADbO,MCaPA,OAAO,EAAPA,ADpBe,OCWV;AHsBX,AGZME,MAAAA,UAAU,EAAVA;AHaN,AGvBW,ADXU,KCWjB;AHwBJ,AGZG,ADvBkB,GCFV;AHsCX,AGZEC,ADxBmB,ECwBnBA,WA1BS,uBA0BGC,GA1BH,EA0BQ;AHanB,AGZI,ADdElB,cAAAA,OAAO,CAACC,GAAR,CAAY,ICcS,KAAKG,GDdVF,OAAhB,GCcqB,EAAvB;AHaJ,AGbI,QAAQc,UAAR,uBAAQA,UAAR;AHcJ,AEvCqB;AFwCrB,AGdI,AD1BiB,QC0BXG,GAAG,0DAAmDD,GAAnD,WAAT;AHeJ,AGdIF,AD3BiB,IC2BjBA,UAAU,CAACI,kBAAX,CAA8B,YAA9B,EAA4CD,GAA5C;AHeJ,AGdI,AD5BiB,SC4BZE,WAAL;AHeJ,AGdG,AD7BkB,GCFV;AH8CX,AGdEA,AD9BmB,E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A+FgB;AHoB3B,AGpB2B;AHqB3B,AGrB2B;AHsB3B;AACA,AGvB2B;AHwB3B,AGxB2B;AHyB3B,AGzB2B;AH0B3B,AG1B2B;AH2B3B,AG3B2B;AH4B3B,AG5B2B,qBAEAlD,qBAAYE,UAAZ,EAFA;AH6B3B;AACA,AG9B2B;AH+B3B,AG/B2B;AHgC3B,AG9BYI,cAAAA,IAFe,yBAEfA,IAFe;AHiC3B;AACA,AG9BI,kBAAIA,IAAI,CAAC6C,GAAL,KAAa,KAAjB,EAAwB;AH+B5B,AG9BMzC,gBAAAA,EAAE,CAACc,WAAH,CAAelB,IAAI,CAACG,OAApB;AH+BN,AG9BK,eAFD,MAEO;AH+BX,AG9BMC,gBAAAA,EAAE,CAAC2B,YAAH,CAAgB/B,IAAhB;AH+BN,AG9BK;AH+BL;AACA,AGxC2B;AHyC3B,AGzC2B;AH0C3B,AG1C2B;AH2C3B,AG3C2B;AH4C3B,AG5C2B;AH6C3B,AG7C2B;AH8C3B,AG9C2B;AH+C3B,AGtCG,GAxGQ;AH+IX,AGtCE8C,EAAAA,IAzGS,kBAyGF;AHuCT,AGvCS;AHwCT;AACA,AGxCI,+BAAoB,KAAKzC,aAAL,EAApB;AHyCJ,AGzCI,QAAQU,OAAR,wBAAQA,OAAR;AH0CJ;AACA,AG1CIA,IAAAA,OAAO,CAACgC,gBAAR,CAAyB,QAAzB;AH2CJ,AG3CI,yEAAmC,kBAAOC,CAAP;AH4CvC,AG5CuC;AH6CvC,AG7CuC;AH8CvC,AG9CuC;AH+CvC,AG/CuC;AHgDvC,AG/CMA,gBAAAA,CAAC,CAACC,cAAF,GADiC,CAEjC;AH+CN;AACA,AG/CM,gBAAA,KAAI,CAACvB,cAAL,GAHiC,CAIjC;AH+CN;AACA;AACA,AGhDM,gBAAA,KAAI,CAACiB,gBAAL;AHiDN;AACA,AGjDM,gBAAA,KAAI,CAACC,gBAAL;AHkDN;AACA,AGzDuC;AH0DvC,AG1DuC;AH2DvC,AG3DuC;AH4DvC,AG5DuC;AH6DvC,AG7DuC;AH8DvC,AG9DuC;AH+DvC,AG/DuC,OAAnC;AHgEJ;AACA,AGjEI;AHkEJ,AGlEI;AHmEJ,AGnEI;AHoEJ,AGpEI;AHqEJ,AG5DIM,IAAAA,MAAM,CAACH,gBAAP,CAAwB,kBAAxB,uEAA4C;AH6DhD,AG7DgD;AH8DhD,AG9DgD;AH+DhD,AG/DgD;AHgEhD,AGhEgD;AHiEhD,AGjEgD;AHkEhD,AGjEM5D,+BAAQM,OAAR,GAD0C,CAE1C;AHiEN;AACA;AACA,AGlEYL,cAAAA,IAHoC,GAG7BD,iBAAQC,IAHqB;AHsEhD,AGlEYC,cAAAA,OAJoC,GAI1BF,iBAAQE,OAJkB,EAM1C;AHiEN;AACA,AGjEMK,mCAAYN,IAAZ,GAAmBA,IAAI,GAAGA,IAAH,GAAU,OAAjC;AHkEN,AGjEMM,mCAAYL,OAAZ,GAAsBA,OAAO,GAAGA,OAAH,GAAa,IAA1C;AHkEN;AACA,AGjEM,cAAA,KAAI,CAACuD,gBAAL;AHkEN;AACA,AG7EgD;AH8EhD,AG9EgD;AH+EhD,AG/EgD;AHgFhD,AGhFgD;AHiFhD,AGjFgD;AHkFhD,AGlFgD;AHmFhD,AGnFgD,KAA5C;AHoFJ,AGxEG;AHyEH,AGzMW,CAAX;AH0MA,eGvEexC;AHwEffile":"main.1f19ae8e.js","sourceRoot":"..","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","const storage = {\r\n  city: \"\",\r\n  country: \"\",\r\n  saveItem() {\r\n    localStorage.setItem(\"wetherApp-city\", this.city);\r\n    localStorage.setItem(\"wetherApp-country\", this.country);\r\n  },\r\n  getItem() {\r\n    this.city = localStorage.getItem(\"wetherApp-city\");\r\n    this.country = localStorage.getItem(\"wetherApp-country\");\r\n  },\r\n};\r\n\r\nexport default storage;\r\n","///object property, method\r\nconst weatherData = {\r\n  city: \"\",\r\n  country: \"\",\r\n  API_KEY: \"d777b9cd1436c98f958dac1e189e4f09\",\r\n  async getWeather() {\r\n    try {\r\n      const res = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${this.city},${this.country}&units=metric&appid=${this.API_KEY}`\r\n      );\r\n      const data = await res.json();\r\n\r\n      return {\r\n        data,\r\n      };\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  },\r\n};\r\n\r\nexport default weatherData;\r\n","import storage from \"./storage\";\r\nimport weatherData from \"./weatherData\";\r\n\r\nconst UI = {\r\n  loadSelectors() {\r\n    const cityElm = document.querySelector(\"#city\");\r\n    const cityInfoElm = document.querySelector(\"#w-city\");\r\n    const iconElm = document.querySelector(\"#w-icon\");\r\n    const temperatureElm = document.querySelector(\"#w-temp\");\r\n    const pressureElm = document.querySelector(\"#w-pressure\");\r\n    const humidityElm = document.querySelector(\"#w-humidity\");\r\n    const feelElm = document.querySelector(\"#w-feel\");\r\n    const formElm = document.querySelector(\"#form\");\r\n    const countryElm = document.querySelector(\"#country\");\r\n    const messageElm = document.querySelector(\"#messageWrapper\");\r\n\r\n    return {\r\n      cityInfoElm,\r\n      cityElm,\r\n      countryElm,\r\n      iconElm,\r\n      temperatureElm,\r\n      pressureElm,\r\n      feelElm,\r\n      humidityElm,\r\n      formElm,\r\n      messageElm,\r\n    };\r\n  },\r\n  showMessage(msg) {\r\n    const { messageElm } = this.loadSelectors();\r\n    const elm = `<div class='alert alert-danger' id='message'>${msg}</div>`;\r\n    messageElm.insertAdjacentHTML(\"afterbegin\", elm);\r\n    this.hideMessage();\r\n  },\r\n  hideMessage() {\r\n    const messageElm = document.querySelector(\"#message\");\r\n    setTimeout(() => {\r\n      if (messageElm) {\r\n        messageElm.remove();\r\n      }\r\n    }, 2000);\r\n  },\r\n  validateInput(city, country) {\r\n    if (country === \"\" || city === \"\") {\r\n      this.showMessage(\"Please provide valid country and city\");\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  },\r\n  getInputValues() {\r\n    const { cityElm, countryElm } = this.loadSelectors();\r\n    const country = countryElm.value;\r\n    const city = cityElm.value;\r\n\r\n    const isValid = this.validateInput(city, country);\r\n\r\n    if (isValid) {\r\n      //setting city and country to weatherData\r\n      weatherData.city = city;\r\n      weatherData.country = country;\r\n\r\n      //setting city and country to localStorage\r\n      storage.city = city;\r\n      storage.country = country;\r\n\r\n      //saving city and country localStorage\r\n      storage.saveItem();\r\n    }\r\n  },\r\n  getIcon(iconCode) {\r\n    return \"https://openweathermap.org/img/w/\" + iconCode + \".png\";\r\n  },\r\n  printWeather(weatherData) {\r\n    const { main, weather, name: cityName } = weatherData;\r\n\r\n    const {\r\n      cityInfoElm,\r\n      temperatureElm,\r\n      pressureElm,\r\n      humidityElm,\r\n      feelElm,\r\n      iconElm,\r\n    } = this.loadSelectors();\r\n    //paint to UI\r\n    cityInfoElm.textContent = cityName;\r\n    temperatureElm.textContent = `Temperature: ${main.temp}°C`;\r\n    pressureElm.textContent = `Pressure: ${main.pressure}Kpa`;\r\n    humidityElm.textContent = `Humidity ${main.humidity}`;\r\n    feelElm.textContent = weather[0].description;\r\n    iconElm.setAttribute(\"src\", this.getIcon(weather[0].icon));\r\n  },\r\n  resetInputValues() {\r\n    const { cityElm, countryElm } = this.loadSelectors();\r\n    cityElm.value = \"\";\r\n    countryElm.value = \"\";\r\n  },\r\n  async handleRemoteData() {\r\n    //get remote data\r\n    const { data } = await weatherData.getWeather();\r\n\r\n    if (data.cod === \"404\") {\r\n      UI.showMessage(data.message);\r\n    } else {\r\n      UI.printWeather(data);\r\n    }\r\n  },\r\n  init() {\r\n    const { formElm } = this.loadSelectors();\r\n    formElm.addEventListener(\"submit\", async (e) => {\r\n      e.preventDefault();\r\n      //get the values from input\r\n      this.getInputValues();\r\n      //reset Input values\r\n      this.resetInputValues();\r\n      this.handleRemoteData();\r\n    });\r\n\r\n    window.addEventListener(\"DOMContentLoaded\", async () => {\r\n      storage.getItem();\r\n      //city and country from storage\r\n      const city = storage.city;\r\n      const country = storage.country;\r\n\r\n      //data source update(if there is no data in localStorage setting default city and country)\r\n      weatherData.city = city ? city : \"Dhaka\";\r\n      weatherData.country = country ? country : \"BD\";\r\n\r\n      this.handleRemoteData();\r\n    });\r\n  },\r\n};\r\n\r\nexport default UI;\r\n","//data -\n//R(Read)\n//UI-CRUD\n//LocalStorage- CRUD\n\n//Application development workflow\n//Requirements(get weather data from API and display in UI)\n//Design\n//code\n\nimport \"regenerator-runtime/runtime\";\nimport UI from \"./ui\";\n\nUI.init();\n"]}